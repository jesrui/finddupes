.TH FINDDUPES 1
.SH NAME
finddupes \- finds duplicate files in a given set of paths

.SH SYNOPSIS
.B finddupes
[
.I options
]
.I PATH
\|.\|.\|.

.SH "DESCRIPTION"
Searches the given paths for duplicate files. Such files are found by
comparing file sizes and MD5 signatures.
.I PATH
arguments can be filenames or directories.

.SH OPTIONS
.TP
.B -r --recursive
for every directory given follow subdirectories encountered within
.TP
.B -s --symlinks
follow symlinked directories and compare files pointed to by their links;
normally symlinked directories and files are skipped
.TP
.B -H --hardlinks
normally, when two or more files point to the same disk area they are
treated as non-duplicates; this option will change this behavior
.TP
.B -n --noempty
exclude zero-length files from consideration
.TP
.B -f --omitfirst
omit the first file in each set of matches
.TP
.B -u --unique
list only files that don't have duplicates
.TP
.B -q --quiet
hide progress indicator
.TP
.B -p --separator\fR=\fIsep\fR
separate files with
.I sep
string instead of '\\n'
.TP
.B -P --setseparator\fR=\fIsep\fR
separate sets with
.I sep
string instead of '\\n\\n'
.TP
.B -v --version
display finddupes version and exit
.TP
.B -h --help
display this help and exit
.P
.I sep
strings may contain any C string escape sequence.
.SH NOTES
Unless
.B --separator
or
.B --setseparator
are specified, duplicate files are listed
together in groups, each file displayed on a separate line. The
groups are then separated from each other by blank lines.

.SH EXAMPLES
.de ES \" start example code
.
.IP "" 4
.
.nf
.fam C
..

.de EE \" end example code
.
.fam T
.fi
.
.IP "" 0
.
..

Remove all duplicate files in a directory tree, ask for individual
confirmation on each file. Note that this works only if filenames do not
contain '\\n', '\\x00' or '\\x01'.
.ES
finddupes \-r \-\-separator '\\x01' \-\-setseparator '\\x00' someDir |
    xargs \-0 \-n1 \-I{} sh \-c '
        s=$(echo {} | tr "\\001" "\\n"); echo; echo \-e "$s"; \\
        echo \-n {} | tr "\\001" "\\000" | xargs \-0pr \-n1 rm'
.EE
.P
Preserve files in a good tree, remove duplicates elsewhere.
Suppose that you want to look for dupes in two trees,
.BR goodTree
and
.BR badTree ,
and, in case of duplicates, you want to preserve a copy in
.BR goodTree
and remove any other dupes. Note that, in each set, files inside the first tree
appear before files inside the second one. The order in which duplicate sets
are printed is not determined though.
.ES
finddupes \-r \-\-omitfirst \-p '\\x00' \-P '\\x00' goodTree badTree |
    xargs \-0r rm
.EE
.P
Find out how much disk space is occupied by duplicate files:
.ES
finddupes \-rf \-p '\\x01' \-P '\\x00' someDir/ |
    xargs \-0 \-n1 \-I{} sh \-c '
        echo \-n {} | tr "\\001" "\\000" | xargs \-0r du \-csh'
.EE
.P
Similar to the previous command but with a grand total instead of detailing
disk usage of each set:
.ES
finddupes \-rf \-p '\\x00' \-P '\\x00' someDir/ | xargs \-r0 du \-ch
.EE
.P
List files without duplicates whose contents are present in
.BR treeA
but not in
.BR treeB :
.ES
finddupes \-\-recursive \-\-unique treeA treeB | grep '^treeA/'
.EE
.SH BUGS
If you find a bug, please report it via <http://github.com/jesrui/finddupes/issues>.

.SH ACKNOWLEDGEMENTS
.B finddupes
draws heavily from
.B fdupes
<https://github.com/adrianlopezroche/fdupes>.
